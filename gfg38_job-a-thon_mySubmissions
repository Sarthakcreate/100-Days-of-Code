//Make Perfect Array
from typing import List

class Solution:
    def makePerfect(self, n: int, arr: List[int]) -> int:
        operations = 0
        
        for i in range(1, n):
            if arr[i] == arr[i - 1]:  
                operations += 1
                arr[i] = -1  
        
        return operations

//House Robber 4
class Solution {
public:
    const int MOD = 1e9 + 7;
    vector<long long> fact, invFact;

    long long modPow(long long x, long long y) {
        long long res = 1;
        x = x % MOD;
        while (y > 0) {
            if (y & 1)
                res = (res * x) % MOD;
            y = y >> 1;
            x = (x * x) % MOD;
        }
        return res;
    }
    void precomputeFactorials(int n) {
        fact.resize(n + 1);
        invFact.resize(n + 1);
        fact[0] = 1;

        for (int i = 1; i <= n; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }

        invFact[n] = modPow(fact[n], MOD - 2);
        for (int i = n - 1; i >= 0; i--) {
            invFact[i] = (invFact[i + 1] * (i + 1)) % MOD;
        }
    }

    long long nCrMod(int n, int r) {
        if (r > n || r < 0) return 0;
        return (fact[n] * invFact[r] % MOD * invFact[n - r] % MOD) % MOD;
    }

    int houseRobWays(int n, int k) {
        if (k > (n + 1) / 2) {
            return 0;
        }

        precomputeFactorials(n);

        return nCrMod(n - k + 1, k);
    }
};

//Maximum Sum of XOR-sums(TLE)
class Solution {
public:
    int maximumSumOfXorSums(int n, vector<int>& arr) {
        vector<int> prefixMax(n), suffixMax(n);
        
        int currXor = 0;
        int maxXor = 0;
        for (int i = 0; i < n; ++i) {
            currXor = 0;
            for (int j = i; j >= 0; --j) {
                currXor ^= arr[j];
                maxXor = max(maxXor, currXor);
            }
            prefixMax[i] = maxXor;
        }

        currXor = 0;
        maxXor = 0;
        for (int i = n - 1; i >= 0; --i) {
            currXor = 0;
            for (int j = i; j < n; ++j) {
                currXor ^= arr[j];
                maxXor = max(maxXor, currXor);
            }
            suffixMax[i] = maxXor;
        }

        int result = 0;
        for (int i = 0; i < n - 1; ++i) {
            result = max(result, prefixMax[i] + suffixMax[i + 1]);
        }

        return result;
    }
};
